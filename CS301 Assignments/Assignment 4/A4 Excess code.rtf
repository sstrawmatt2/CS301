{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red254\green187\blue91;
\red153\green168\blue186;\red95\green96\blue103;\red117\green114\blue185;\red86\green132\blue173;\red109\green109\blue109;
\red128\green63\blue122;\red191\green100\blue38;\red32\green32\blue32;\red254\green187\blue91;\red153\green168\blue186;
\red128\green63\blue122;\red117\green114\blue185;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c99608\c73333\c35686;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c37255\c37647\c40392;\csgenericrgb\c45882\c44706\c72549;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c42745\c42745\c42745;
\csgenericrgb\c50196\c24706\c47843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c50196\c24706\c47843;\csgenericrgb\c45882\c44706\c72549;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 def \cf4 implementing_binary\cf5 (sorted_list):\
    \cf6 list1 \cf5 = []\
    \cf6 list2 \cf5 = []\
    temp_val = \cf7 len\cf5 (sorted_list)\
    \cf7 print\cf5 (temp_val)\
    mid = temp_val // \cf8 2\
    \cf7 print\cf5 (mid)\
\
\cf7 print\cf5 (implementing_binary([\cf8 1\cf2 ,\cf8 2\cf2 ,\cf8 3\cf2 ,\cf8 4\cf5 ]))\
\
\cf9 # Recusrion takes place in this function\
\cf2 def \cf4 list_sum\cf5 (num_list):\
    \cf2 if \cf7 len\cf5 (num_list) == \cf8 1\cf5 :\
        \cf2 return \cf5 num_list[\cf8 0\cf5 ]\
    \cf2 else\cf5 :\
        \cf2 return \cf5 num_list[\cf8 0\cf5 ] + list_sum(num_list[\cf8 1\cf5 :])\
\
\cf7 print\cf5 (list_sum([\cf8 1\cf2 ,\cf8 2\cf2 ,\cf8 3\cf2 ,\cf8 54\cf2 ,\cf8 6\cf2 ,\cf8 32\cf2 ,\cf8 11\cf2 ,\cf8 102\cf5 ]))\
\
\
\cf9 # def search_sorted_list(sorted_list, item):\
#     if item in sorted_list:\
#         return True\
#     else:\
#         return False\
#\
#\
# print(search_sorted_list([1,2,3,4],4))\
\
\
\
\
\
\
\
# def binary_search(sorted_list, item_to_search_for):\
#     begin_index = 0\
#     end_index = len(sorted_list)-1\
#     while begin_index <= end_index:\
#         midpoint = begin_index + (end_index - begin_index) // 2    # just gets us to the middle of the list or close to it.\
#         mid_value = sorted_list[midpoint]\
# # #         if mid_value == item_to_search_for:\
# # #             return midpoint\
# # #         elif item_to_search_for < mid_value:\
# # #             end_index = midpoint - 1\
# # #         else:\
# # #             begin_index = midpoint + 1\
# # #     return None\
#\
#\
# listA = [2, 3, 4, 5, 10, 16, 17, 18, 20]\
# itemA = 5\
# print(binary_search(listA, itemA))\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf9 \cb3 # true_list = len(self.list_one)\
# if len(self.list_one) != true_list:\
#     self.list_one.append(item_to_enter)\
#     return self.list_one\
# else:\
#     print("Error Has Occurred")\
#     return False\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 \cb3 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf9 \cb3 # if None in self.list_one:\
#     self.list_one.remove(None)\
#     self.list_one.append(item_to_enter)\
#     print(self.list_one)\
# else:\
#     print("Error has occurred")\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 \cb3 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 \cb3 index_val = \cf8 0\
\cf5 temp = \cf7 len\cf5 (\cf10 self\cf5 .list_one)\
\cf2 for \cf5 i \cf2 in \cf7 range\cf5 (temp):\
    index_val += \cf8 1\
    \cf2 if \cf5 item_to_search_for \cf2 in \cf10 self\cf5 .list_one:\
        \cf7 print\cf5 (index_val)\
        \cf2 return True\
    else\cf5 :\
        \cf2 return False\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf9 # def hash_function(self, item_to_search_for):\
    # index_value = 0\
    # if item_to_search_for in self.list_one:\
    #     self.list_one[item_to_search_for] = index_value\
    #     return index_value\
    # else:\
    #     return False\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 \cb3 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf11 \cb12 def \cf13 hash_list\cf14 (\cf15 self\cf11 , \cf14 length_of_list):\
    \cf15 self\cf14 .list_one = []\
    \cf11 for \cf14 i \cf11 in \cf16 range\cf14 (length_of_list):\
        \cf15 self\cf14 .list_one.append(i)\
    \cf11 return \cf15 self\cf14 .list_one\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 \cb3 \
}